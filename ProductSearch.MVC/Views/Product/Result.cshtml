@model (List<ResultDataViewModel> Results, SearchViewModel Search)

@{
    ViewBag.Title = "Search Results";
    var currentSort = Model.Search.SortColumn;
    var currentDir = Model.Search.SortDirection ?? "asc";

    string NextDir(string column) =>
        currentSort == column && currentDir == "asc" ? "desc" : "asc";
}

<h2>Search Results (@Model.Results.Count)</h2>

<form method="post" asp-action="Search">
    @* Preserve all existing search filters *@
    <input type="hidden" id="SortColumnInput" name="Search.SortColumn" value="@Model.Search.SortColumn" />
    <input type="hidden" id="SortDirectionInput" name="Search.SortDirection" value="@currentDir" />

    @* Check and render hidden inputs for LabNames only if not null *@
    @if (Model.Search.LabNames != null)
    {
        @foreach (var labName in Model.Search.LabNames)
        {
            <input type="hidden" name="Search.LabNames" value="@labName" />
        }
    }

    @* Check and render hidden inputs for ColorNames only if not null *@
    @if (Model.Search.ColorNames != null)
    {
        @foreach (var colorName in Model.Search.ColorNames)
        {
            <input type="hidden" name="Search.ColorNames" value="@colorName" />
        }
    }

    @* Check and render hidden inputs for TypeNames only if not null *@
    @if (Model.Search.TypeNames != null)
    {
        @foreach (var typeName in Model.Search.TypeNames)
        {
            <input type="hidden" name="Search.TypeNames" value="@typeName" />
        }
    }

    @* Check and render hidden inputs for ClarityNames only if not null *@
    @if (Model.Search.ClarityNames != null)
    {
        @foreach (var clarityName in Model.Search.ClarityNames)
        {
            <input type="hidden" name="Search.ClarityNames" value="@clarityName" />
        }
    }

    @* Check and render hidden inputs for CutNames only if not null *@
    @if (Model.Search.CutNames != null)
    {
        @foreach (var cutName in Model.Search.CutNames)
        {
            <input type="hidden" name="Search.CutNames" value="@cutName" />
        }
    }

    @* Check and render hidden inputs for PolishNames only if not null *@
    @if (Model.Search.PolishNames != null)
    {
        @foreach (var polishName in Model.Search.PolishNames)
        {
            <input type="hidden" name="Search.PolishNames" value="@polishName" />
        }
    }

    @* Check and render hidden inputs for SymmetryNames only if not null *@
    @if (Model.Search.SymmetryNames != null)
    {
        @foreach (var symmetryName in Model.Search.SymmetryNames)
        {
            <input type="hidden" name="Search.SymmetryNames" value="@symmetryName" />
        }
    }

    @* Check and render hidden inputs for FluorescenceNames only if not null *@
    @if (Model.Search.FluorescenceNames != null)
    {
        @foreach (var fluorescenceName in Model.Search.FluorescenceNames)
        {
            <input type="hidden" name="Search.FluorescenceNames" value="@fluorescenceName" />
        }
    }

    @* Check and render hidden inputs for LocationNames only if not null *@
    @if (Model.Search.LocationNames != null)
    {
        @foreach (var locationName in Model.Search.LocationNames)
        {
            <input type="hidden" name="Search.LocationNames" value="@locationName" />
        }
    }


    @* Preserve price/discount range filters if any *@
    @Html.HiddenFor(m => m.Search.DiscountFrom)
    @Html.HiddenFor(m => m.Search.DiscountTo)
    @Html.HiddenFor(m => m.Search.PriceFrom)
    @Html.HiddenFor(m => m.Search.PriceTo)

    <input type="hidden" name="Search.PageNumber" value="@Model.Search.PageNumber" />

    <script>
        function setSortDirection(newDir, colName) {
            event.preventDefault();
            document.getElementById('SortDirectionInput').value = newDir;
            document.getElementById('SortColumnInput').value = colName;
            // Ensure other hidden fields are preserved
            const form = document.forms[0]; 
            form.submit();
        }

        function setPageNumber(page) {
            document.getElementsByName('Search.PageNumber')[0].value = page;
            document.forms[0].submit();
        }
    </script>

    <table class="table table-striped table-bordered">
        <thead>
            <tr>
                @foreach (var column in new[] {
                ("ItemId", "Item ID"), ("ItemCode", "Item Code"), ("LabName", "Lab"),
                ("ColorName", "Color"), ("TypeName", "Type"), ("ClarityName", "Clarity"),
                ("CutName", "Cut"), ("PolishName", "Polish"), ("SymmetryName", "Symmetry"),
                ("FlourName", "Fluorescence"), ("LocationName", "Location"),
                ("BasePrice", "Base Price"), ("Discount", "Discount (%)"), ("Price", "Final Price")
                })
                {
                    var colName = column.Item1;
                    var colLabel = column.Item2;
                    var nextDir = NextDir(colName);
                    <th>
                        <button type="submit"
                                name="SortColumn"
                                value="@colName"
                                onclick="setSortDirection('@nextDir', '@colName')"
                                class="btn btn-link p-0 text-decoration-none">
                            @colLabel
                            @if (currentSort == colName)
                            {
                                <span class="@(currentDir == "asc" ? "bi bi-caret-up-fill" : "bi bi-caret-down-fill")"></span>
                            }
                        </button>
                    </th>
                }
            </tr>
        </thead>
        <tbody>
            @if (Model.Results.Any())
            {
                foreach (var item in Model.Results)
                {
                    <tr>
                        <td>@item.ItemId</td>
                        <td>@item.ItemCode</td>
                        <td>@item.LabName</td>
                        <td>@item.ColorName</td>
                        <td>@item.TypeName</td>
                        <td>@item.ClarityName</td>
                        <td>@item.CutName</td>
                        <td>@item.PolishName</td>
                        <td>@item.SymmetryName</td>
                        <td>@item.FlourName</td>
                        <td>@item.LocationName</td>
                        <td>@(item.BasePrice?.ToString("F2") ?? "-")</td>
                        <td>@(item.Discount?.ToString("F2") ?? "-")</td>
                        <td>@(item.Price?.ToString("F2") ?? "-")</td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="14" class="text-center text-muted">No results found.</td>
                </tr>
            }
        </tbody>
    </table>

    @* NEW: Paging controls *@
    @if (ViewBag.TotalRecords != null)
    {
        int totalRecords = (int)ViewBag.TotalRecords;
        int pageSize = Model.Search.PageSize;
        int currentPage = Model.Search.PageNumber;
        int totalPages = (int)Math.Ceiling(totalRecords / (double)pageSize);

        if (totalPages > 1)
        {
            <nav aria-label="Page navigation">
                <ul class="pagination justify-content-center">

                    <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                        <button type="button" class="page-link" onclick="setPageNumber(@(currentPage - 1))">Previous</button>
                    </li>

                    @for (int i = 1; i <= totalPages; i++)
                    {
                        <li class="page-item @(currentPage == i ? "active" : "")">
                            <button type="button" class="page-link" onclick="setPageNumber(@i)">@i</button>
                        </li>
                    }

                    <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                        <button type="button" class="page-link" onclick="setPageNumber(@(currentPage + 1))">Next</button>
                    </li>

                </ul>
            </nav>
        }
    }

</form>
